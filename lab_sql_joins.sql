/* SQL JOIN - LAB ANSWERS */

USE SAKILA;

/* 1. List the number of films per category. */

SELECT F.TITLE, FC.CATEGORY_ID FROM SAKILA.FILM AS F
JOIN SAKILA.FILM_CATEGORY AS FC ON F.FILM_ID = FC.FILM_ID;

/* 2. Retrieve the store ID, city, and country for each store. */

-- ADDRESS_ID = 1 AND ADDRESS_ID = 2 ARE FROM THE STORES
-- ADDRESS_ID = 3 AND ADDRESS_ID = 4 ARE FROM EMPLOYESS
-- ADDRESS_ID >= 5 ARE FROM CUSTOMERS

-- SELECT FROM ADDRESS_ID (ADDRESS) AND:
-- A. CONNECT WITH STORE VIA ADDRESS_ID AND BRING STORE_ID
-- B. CONNECT WITH CITY VIA CITY_ID AND BRING CITY
-- C. CONNECT WITH COUNTRY VIA CITY_ID AND BRING COUNTRY

SELECT S.STORE_ID AS "STORE ID",
CT.CITY AS "CITY",
CO.COUNTRY AS "COUNTRY" 
FROM SAKILA.ADDRESS AS A
RIGHT JOIN SAKILA.STORE AS S ON A.ADDRESS_ID = S.ADDRESS_ID
LEFT JOIN SAKILA.CITY AS CT ON A.CITY_ID = CT.CITY_ID
LEFT JOIN SAKILA.COUNTRY CO ON CT.COUNTRY_ID = CO.COUNTRY_ID;

/* 3. Calculate the total revenue generated by each store in dollars. */
-- I CONSIDERED THE REVENUE FROM THE AMOUNT COLUMN IN THE PAYMENT TABLE
-- EACH EMPLOYEE (2) WORKS IN A DIFFERENT STORE
-- JOIN PAYMENT WITH STAFF VIA STAFF_ID AND BRING STORE_ID

SELECT SUM(P.AMOUNT) AS "REVENUE IN USD", S.STORE_ID FROM SAKILA.PAYMENT AS P
RIGHT JOIN SAKILA.STAFF AS S ON P.STAFF_ID = S.STAFF_ID
GROUP BY S.STORE_ID;

/* 4. Determine the average running time of films for each category. */

SELECT SEC_TO_TIME(ROUND(AVG(F.LENGTH), 0)*60) AS "AVERAGE DURATION",
FC.CATEGORY_ID AS "CATEGORY"
FROM SAKILA.FILM AS F
JOIN SAKILA.FILM_CATEGORY AS FC ON F.FILM_ID = FC.FILM_ID
GROUP BY FC.CATEGORY_ID;

/* Bonus
5. Identify the film categories with the longest average running time. */
-- I CONSIDERED THE CATEGORIES WITH THE 3 LONGEST RUNNING TIMES

SELECT SEC_TO_TIME(ROUND(AVG(F.LENGTH), 0)*60) AS "AVERAGE DURATION",
FC.CATEGORY_ID AS "CATEGORY"
FROM SAKILA.FILM AS F
JOIN SAKILA.FILM_CATEGORY AS FC ON F.FILM_ID = FC.FILM_ID
GROUP BY FC.CATEGORY_ID
ORDER BY SEC_TO_TIME(ROUND(AVG(F.LENGTH), 0)*60) DESC
LIMIT 3;

/* 6. Display the top 10 most frequently rented movies in descending order. */

SELECT COUNT(F.TITLE) AS "TIMES RENTED", F.TITLE FROM SAKILA.RENTAL AS R
LEFT JOIN SAKILA.INVENTORY AS I ON R.INVENTORY_ID = I.INVENTORY_ID
LEFT JOIN SAKILA.FILM AS F ON I.FILM_ID = F.FILM_ID
GROUP BY F.TITLE
ORDER BY COUNT(F.TITLE) DESC
LIMIT 10;

/* 7. Determine if "Academy Dinosaur" can be rented from Store 1. */

SELECT I.STORE_ID, F.TITLE FROM SAKILA.INVENTORY AS I 
LEFT JOIN SAKILA.FILM AS F ON I.FILM_ID = F.FILM_ID
WHERE F.TITLE = 'ACADEMY DINOSAUR' AND I.STORE_ID = 1;

-- YES, "ACADEMY DINOSAUR" CAN BE RENTED FROM STORE 1

/* 8. Provide a list of all distinct film titles, along with their availability status
 in the inventory. Include a column indicating whether each title is 'Available' or
 'NOT available.' Note that there are 42 titles that are not in the inventory, and this
 information can be obtained using a CASE statement combined with IFNULL." */
 
SELECT F.TITLE, I.INVENTORY_ID,
CASE
WHEN I.INVENTORY_ID IS NULL THEN "Not Available"
ELSE 'Available'
END AS "AVAILABILITY" 
FROM SAKILA.INVENTORY AS I 
RIGHT JOIN SAKILA.FILM AS F ON I.FILM_ID = F.FILM_ID;




